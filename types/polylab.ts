/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/login": {
    /** This API is used to login to the application. */
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["AuthResponse"];
          };
        };
      };
    };
  };
  "/me": {
    /** This API returns the the currently logged in user. */
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["TokenClaims"];
          };
        };
      };
    };
  };
  "/surveys/complete": {
    /** Complete a survey. */
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["SurveyCompleteRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["SurveyResponse"];
          };
        };
      };
    };
  };
  "/surveys/{id}": {
    /** Get a survey by uuid. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["SurveyResponse"];
          };
        };
      };
    };
  };
  "/surveys": {
    /** Get all surveys. */
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["SurveyResponse"][];
          };
        };
      };
    };
  };
  "/competitions": {
    /** This API is used to get all competitions. */
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["CompetitionResponse"][];
          };
        };
      };
    };
  };
  "/purchases/balance": {
    /** Get current balance for a user. */
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["BalanceResponse"];
          };
        };
      };
    };
  };
  "/purchases/redeem": {
    /** Redeem a balance from a purchase. */
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RedeemRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["RedeemResponseReq"];
          };
        };
        400: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
        500: {
          content: never;
        };
        501: {
          content: never;
        };
      };
    };
  };
  "/free/{id}": {
    /** Download a survey that is free. (ONLY WORKS FOR FREE SURVEYS!) */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/octet-stream": string;
          };
        };
        404: {
          content: never;
        };
      };
    };
  };
  "/purchases/{id}": {
    /** Download a purchase for a sepecific survey */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/octet-stream": string;
          };
        };
        404: {
          content: never;
        };
      };
    };
  };
  "/purchases": {
    /** Create a purchase for a sepecific survey */
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PurchaseRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["CreateResponse"];
          };
        };
        400: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress/create": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ProgressRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ProgressObj"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress/association/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ProgressTrialAssociation"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress/associate": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ProgressTrialAssociation"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ProgressTrialAssociation"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress/upload": {
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            name: string;
            desc?: string;
            bucket: string;
            /** Format: binary */
            file: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["UploadResponse"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress/file/{bucket}/{path}": {
    get: {
      parameters: {
        path: {
          bucket: string;
          path: string;
        };
      };
      responses: {
        200: {
          headers: {
            /** @description Indicate if the content is expected to be displayed inline in the browser, that is, as a Web page or as part of a Web page, or as an attachment, that is downloaded and saved locally. */
            "Content-Disposition": string;
          };
          content: {
            "application/octet-stream": string;
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/genome/upload": {
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            name: string;
            desc?: string;
            /** Format: binary */
            file: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["UploadResponse"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/progress": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ProgressObj"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/treatments/create": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["TreatmentRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Treatment"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/treatments/upload": {
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            name: string;
            desc?: string;
            bucket: string;
            /** Format: binary */
            file: string;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["UploadResponse"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/treatments/vote": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["VotePayload"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["VoteResponse"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/treatments/{id}/votes": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["VoteResponse"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/treatments": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["TreatmentResponse"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/trials": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Trial"][];
          };
        };
        401: {
          content: never;
        };
        404: {
          content: never;
        };
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["TrialReq"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Trial"];
          };
        };
        401: {
          content: never;
        };
        404: {
          content: never;
        };
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/trials/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Trial"];
          };
        };
        401: {
          content: never;
        };
        404: {
          content: never;
        };
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Notification"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications/viewed/{id}": {
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Notification"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications/cleared/{id}": {
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Notification"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications/create": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["NotifRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Notification"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications/batch": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["NotifRequest"][];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Notification"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/notifications/all": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["NotifRequestAll"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": boolean;
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/jobs": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": boolean;
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/post/{id}/comments": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Comment"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/comments": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["CommentReq"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Comment"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/comments/{id}": {
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Comment"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["CommentEdit"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Comment"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/products": {
    get: {
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Product"][];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/products/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ProductResponse"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/orders/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["ShippedOrder"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/orders/place": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PlaceOrderReq"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Order"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/orders/check": {
    get: {
      responses: {
        200: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/orders/update": {
    patch: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PaymentUpdate"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": boolean;
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
  "/orders/create": {
    post: {
      requestBody: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["OrderReq"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json; charset=utf-8": components["schemas"]["Order"];
          };
        };
        /** @description Incorrect data provided */
        400: {
          content: never;
        };
        /** @description You are unauthorized to perform this request. */
        401: {
          content: never;
        };
        /** @description Something went wrong on our end */
        500: {
          content: {
            "text/plain; charset=utf-8": string;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Address: {
      street: string;
      city: string;
      state: string;
      country: string;
      zip: string;
      first_name: string;
      last_name: string;
      phone: string;
      discord: string;
    };
    Amr: {
      method: string;
      /** Format: int64 */
      timestamp: number;
    };
    Answer: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_id?: string;
      /** Format: uuid */
      survey_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      nft?: string;
      /** Format: uuid */
      pending_user?: string;
    };
    AnswerRequest: {
      question_id: string;
      response: string;
    };
    AnswerResponse: {
      answer: components["schemas"]["Answer"];
      responses: components["schemas"]["QuestionResponse"][];
    };
    AppMetadata: {
      provider: string;
      providers: string[];
    };
    AuthResponse: {
      access_token: string;
      token_type: string;
      /** Format: int64 */
      expires_in: number;
      refresh_token: string;
      user: components["schemas"]["User"];
    };
    BalanceResponse: {
      /** Format: uint64 */
      balance: number;
    };
    Bet: {
      /** Format: uuid */
      id_competitions: string;
      /** Format: uuid */
      id_users: string;
      /** Format: int64 */
      wager: number;
    };
    Comment: {
      /** Format: uuid */
      id: string;
      user_id?: string;
      content: string;
      /** Format: uuid */
      reply_to?: string;
      /** Format: date-time */
      created_at: string;
      deleted: boolean;
      /** Format: uuid */
      treatment_id: string;
      sub_comments: components["schemas"]["Comment"][];
    };
    CommentEdit: {
      content: string;
    };
    CommentReq: {
      content: string;
      /** Format: uuid */
      reply_to?: string;
      /** Format: uuid */
      treatment_id: string;
    };
    Competition: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      start_time: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    CompetitionResponse: {
      competition: components["schemas"]["Competition"];
      contestants: components["schemas"]["Contestant"][];
      bets: components["schemas"]["Bet"][];
    };
    Contestant: {
      /** Format: uuid */
      id: string;
      name?: string;
    };
    CreateResponse: {
      address: string;
      /** Format: uuid */
      id: string;
    };
    Identity: {
      id: string;
      user_id: string;
      identity_data: components["schemas"]["IdentityData"];
      provider: string;
      last_sign_in_at: string;
      created_at: string;
      updated_at: string;
    };
    IdentityData: {
      email: string;
      sub: string;
    };
    Item: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      product_id: string;
      status: components["schemas"]["OrderStatus"];
      /** Format: date-time */
      updated_at: string;
      product: components["schemas"]["Product"];
    };
    LoginRequest: {
      email: string;
      password: string;
    };
    NotifRequest: {
      user_id: string;
      /** Format: date-time */
      issued_at?: string;
      notification_content: string;
      url?: string;
    };
    NotifRequestAll: {
      /** Format: date-time */
      issued_at?: string;
      notification_content: string;
      url?: string;
    };
    Notification: {
      /** Format: uuid */
      id: string;
      user_id: string;
      /** Format: date-time */
      issued_at: string;
      viewed: boolean;
      notification_content: string;
      cleared: boolean;
      url?: string;
    };
    Order: {
      /** Format: uuid */
      id: string;
      status: components["schemas"]["OrderStatus"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      id_users: string;
      payment_intent?: string;
      client_secret?: string;
    };
    OrderReq: {
      items: string[];
    };
    /** @enum {string} */
    OrderStatus: "CREATED" | "PAID" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED";
    PaymentUpdate: {
      /** Format: int64 */
      total: number;
      id: string;
      secret_token: string;
    };
    PlaceOrderReq: {
      /** Format: uuid */
      id: string;
      address: components["schemas"]["Address"];
      reciept: components["schemas"]["Receipt"];
    };
    Product: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: int64 */
      price: number;
      image_src: string;
      image_alt: string;
      /** Format: int32 */
      rating: number;
      /** Format: int32 */
      lead_time: number;
      /** Format: int32 */
      stock: number;
      description: string;
    };
    ProductFeature: {
      /** Format: uuid */
      id: string;
      name: string;
      features: string[];
      /** Format: uuid */
      product_id: string;
    };
    ProductImage: {
      /** Format: uuid */
      id: string;
      image_src: string;
      image_alt: string;
      /** Format: uuid */
      product_id: string;
    };
    ProductResponse: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: int64 */
      price: number;
      image_src: string;
      image_alt: string;
      /** Format: int32 */
      rating: number;
      images: components["schemas"]["ProductImage"][];
      features: components["schemas"]["ProductFeature"][];
      /** Format: int32 */
      lead_time: number;
      is_in_stock: boolean;
      description: string;
    };
    ProgressObj: {
      /** Format: uuid */
      id: string;
      title?: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author: string;
      attachments?: string[];
      bloodwork?: string[];
    };
    ProgressRequest: {
      title?: string;
      content: string;
      attachments?: string[];
      bloodwork?: string[];
    };
    ProgressTrialAssociation: {
      /** Format: uuid */
      progress_id: string;
      /** Format: uuid */
      trial_id: string;
      is_associated: boolean;
    };
    PurchaseRequest: {
      /** Format: uuid */
      survey_id: string;
    };
    Question: {
      /** Format: uuid */
      id: string;
      question: string;
      required: boolean;
      /** Format: uuid */
      survey_id?: string;
      type: components["schemas"]["QuestionType"];
      /** Format: int32 */
      order: number;
      hidden: boolean;
    };
    QuestionResponse: {
      question: components["schemas"]["Question"];
      multiple_choice_options?: string[];
      responses: components["schemas"]["UserResponse"][];
    };
    /** @enum {string} */
    QuestionType: "TEXT" | "MULTIPLE_CHOICE" | "FILE";
    /** @enum {string} */
    ReactionType: "Responder" | "SideEffect" | "NonResponder";
    Receipt: {
      /** Format: uuid */
      id: string;
      /** Format: int64 */
      subtotal: number;
      /** Format: int64 */
      shipping: number;
      /** Format: int64 */
      tax: number;
      /** Format: int64 */
      total: number;
    };
    RedeemRequest: {
      /** Format: uint64 */
      amount: number;
      address: string;
    };
    RedeemResponseReq: {
      success: boolean;
    };
    ShippedOrder: {
      /** Format: uuid */
      id: string;
      status: components["schemas"]["OrderStatus"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      id_users: string;
      payment_intent?: string;
      client_secret?: string;
      shipping: components["schemas"]["ShippingInfo"];
      items: components["schemas"]["Item"][];
      address: components["schemas"]["Address"];
      receipt?: components["schemas"]["Receipt"];
    };
    ShippingInfo: {
      carrier?: string;
      tracking_number?: string;
    };
    Survey: {
      /** Format: uuid */
      id: string;
      title: string;
      description: string;
      /** Format: uuid */
      project_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      nft?: string;
    };
    SurveyCompleteRequest: {
      survey_id: string;
      user_id?: string;
      answers: components["schemas"]["AnswerRequest"][];
    };
    SurveyResponse: {
      survey: components["schemas"]["Survey"];
      answers: components["schemas"]["AnswerResponse"][];
      questions: components["schemas"]["Question"][];
    };
    TokenClaims: {
      aud: string;
      /** Format: int64 */
      exp: number;
      /** Format: int64 */
      iat: number;
      sub: string;
      email: string;
      phone: string;
      app_metadata: components["schemas"]["AppMetadata"];
      user_metadata: components["schemas"]["UserMetadata"];
      role: string;
      aal: string;
      amr: components["schemas"]["Amr"][];
      session_id: string;
    };
    Treatment: {
      /** Format: uuid */
      id: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author: string;
      attachments?: string[];
      bloodwork?: string[];
    };
    TreatmentRequest: {
      content: string;
      attachments?: string[];
      bloodwork?: string[];
    };
    TreatmentResponse: {
      /** Format: uuid */
      id: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author: string;
      attachments?: string[];
      bloodwork?: string[];
      votes: components["schemas"]["VoteResponse"][];
    };
    Trial: {
      /** Format: uuid */
      id: string;
      title: string;
      content: string;
    };
    TrialReq: {
      title: string;
      content: string;
    };
    UploadResponse: {
      file: string;
    };
    User: {
      id: string;
      aud: string;
      role: string;
      email: string;
      email_confirmed_at: string;
      phone: string;
      confirmation_sent_at: string;
      confirmed_at: string;
      last_sign_in_at: string;
      app_metadata: components["schemas"]["AppMetadata"];
      user_metadata: components["schemas"]["UserMetadata"];
      identities: components["schemas"]["Identity"][];
      created_at: string;
      updated_at: string;
    };
    UserMetadata: Record<string, never>;
    UserResponse: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      question_id: string;
      response: string;
      /** Format: uuid */
      answer_id: string;
      /** Format: uuid */
      decryption_key?: string;
    };
    VotePayload: {
      /** Format: uuid */
      treatment_id: string;
      value: components["schemas"]["ReactionType"];
      remove: boolean;
    };
    VoteResponse: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      treatment_id: string;
      value: components["schemas"]["ReactionType"];
      user_id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
